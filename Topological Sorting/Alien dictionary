#include<bits/stdc++.h>
vector<int>topo(vector<int>g[],int indeg[],int vis[]){
    queue<int>q;
    vector<int>ans;
    int count = 0;
    for(int i = 0; i<26; i++){
        if(vis[i]==1&&indeg[i]==0){
            q.push(i);
            ans.push_back(i);
        }
        if(vis[i]==1)count++;
    }
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        for(auto child:g[parent]){
            indeg[child]--;
            if(indeg[child]==0){
                q.push(child);
                ans.push_back(child);
            }
        }
    }
    if(count==ans.size())return ans;
    else{
        ans.clear();
        return ans;
    }
}
vector<char> getAlienLanguage(string* dictionary, int n)
{
    int vis[26] = {0};
    for(int i = 0; i<n; i++){
        string ss = dictionary[i];
        for(int j = 0; j<ss.size(); j++){
            vis[ss[j]-'a'] = 1;
        }
    }
    vector<int>g[26];
    int indeg[26] = {0};
    for(int i = 0; i<n-1; i++){
        string aa = dictionary[i];
        string bb = dictionary[i+1];
        for(int j = 0; j<min(aa.size(),bb.size()); j++){
            if(aa[j]!=bb[j]){
                g[aa[j]-'a'].push_back(bb[j]-'a');
                indeg[bb[j]-'a']++;
                break;
            }
        }
    }
    vector<int>ans = topo(g,indeg,vis);
    vector<char>res;
    for(int i = 0; i<ans.size(); i++){
        res.push_back(ans[i]+'a');
    }
    return res;
}
