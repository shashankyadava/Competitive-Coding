                                                                      B. Count Subrectangles
                                                                      time limit per test1 second
                                                                      memory limit per test512 megabytes
                                                                      inputstandard input
                                                                      outputstandard output
                                                                      
You are given an array a of length n and array b of length m both consisting of only integers 0 and 1. Consider a matrix c of size n×m formed by following rule: ci,j=ai⋅bj (i.e. ai multiplied by bj). It's easy to see that c consists of only zeroes and ones too.

How many subrectangles of size (area) k consisting only of ones are there in c?

A subrectangle is an intersection of a consecutive (subsequent) segment of rows and a consecutive (subsequent) segment of columns. I.e. consider four integers x1,x2,y1,y2 (1≤x1≤x2≤n, 1≤y1≤y2≤m) a subrectangle c[x1…x2][y1…y2] is an intersection of the rows x1,x1+1,x1+2,…,x2 and the columns y1,y1+1,y1+2,…,y2.

The size (area) of a subrectangle is the total number of cells in it.

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

vector<pair<ll,ll>>index1 = {
    {1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1},{1,1}
};
const int N = 100000;
vector<int>adj[N];
int visi[N];
void dfs(int v){
    int parent = v;
    visi[parent] = 1;
    for(int child: adj[parent]){
        if(visi[child])continue;

        dfs(child);
    }
}

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    vector<int>ans;
    int vis[100001] = {0};
    queue<int>q;
    q.push(0);
    vis[0] = 1;
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        ans.push_back(parent);
        for(int child: adj[parent]){
            if(vis[child])continue;
            q.push(child);
            vis[child] = 1;
        }
    }
    return ans;
}

ll binaryexponentiation(ll a,ll b){
    if(b==0)return 1;
    ll res = binaryexponentiation(a,b/2);
    if(b%2) return res*res*a;
    else return res*res;
}

void SieveOfEratosthenes(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++){
        if (prime[p] == true){
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= n; p++){
        if (prime[p]){
            cout<<p<<" ";
        }
    }        
}
void add_edge(int n){
    for(int i = 0; i<n; i++){
        ll x,y; cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}
vector<ll> count(vector<ll>temp){
    ll n = temp.size();
    vector<ll>res(n+1,0);
    for(int i = 0; i<n; i++){
        if(temp[i]==0)continue;
        int j = i;
        while(j<n&&temp[j]==1){
            j++;
        }
        for(int len = 1; len<=j-i; len++){
            res[len]+=j-i-len+1;
        }
        i = j;
    }
    return res;
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n,m,k; cin>>n>>m>>k;
    vector<ll>a(n),b(m);
    for(int i = 0; i<n; i++){
        cin>>a[i];
    }
    for(int i = 0; i<m; i++)cin>>b[i];
    vector<ll>row = count(a);
    vector<ll>col = count(b);
    ll ans = 0;
    for(int i = 1; i<row.size(); i++){
        if(k%i==0&&k/i<=m){
            ans+=row[i]*col[k/i];
        }
    }
    cout<<ans<<endl;
    return 0;
}
