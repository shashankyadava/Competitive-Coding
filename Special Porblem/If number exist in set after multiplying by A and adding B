                                                                B. Plus and Multiply
                                                                time limit per test3 seconds
                                                                memory limit per test512 megabytes
                                                                inputstandard input
                                                                outputstandard output
                                                                There is an infinite set generated as follows:

1 is in this set.
If x is in this set, x⋅a and x+b both are in this set.
For example, when a=3 and b=6, the five smallest elements of the set are:

1,
3 (1 is in this set, so 1⋅a=3 is in this set),
7 (1 is in this set, so 1+b=7 is in this set),
9 (3 is in this set, so 3⋅a=9 is in this set),
13 (7 is in this set, so 7+b=13 is in this set).
Given positive integers a, b, n, determine if n is in this set.

Input
The input consists of multiple test cases. The first line contains an integer t (1≤t≤105) — the number of test cases. The description of the test cases follows.

The only line describing each test case contains three integers n, a, b (1≤n,a,b≤109) separated by a single space.

Output
For each test case, print "Yes" if n is in this set, and "No" otherwise. You can print each letter in any case.

Example
inputCopy
5
24 3 5
10 3 6
2345 1 4
19260817 394 485
19260817 233 264
outputCopy
Yes
No
Yes
No
Yes
Note
In the first test case, 24 is generated as follows:

1 is in this set, so 3 and 6 are in this set;
3 is in this set, so 9 and 8 are in this set;
8 is in this set, so 24 and 13 are in this set.
Thus we can see 24 is in this set.

The five smallest elements of the set in the second test case is described in statements. We can see that 10 isn't among them.

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

vector<pair<ll,ll>>index1 = {
    {1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1},{1,1}
};
const int N = 100000;
vector<int>adj[N];
int visi[N];
void dfs(int v){
    int parent = v;
    visi[parent] = 1;
    for(int child: adj[parent]){
        if(visi[child])continue;

        dfs(child);
    }
}

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    vector<int>ans;
    int vis[100001] = {0};
    queue<int>q;
    q.push(0);
    vis[0] = 1;
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        ans.push_back(parent);
        for(int child: adj[parent]){
            if(vis[child])continue;
            q.push(child);
            vis[child] = 1;
        }
    }
    return ans;
}

ll binaryexponentiation(ll a,ll b){
    if(b==0)return 1;
    ll res = binaryexponentiation(a,b/2);
    if(b%2) return res*res*a;
    else return res*res;
}

void SieveOfEratosthenes(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++){
        if (prime[p] == true){
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= n; p++){
        if (prime[p]){
            cout<<p<<" ";
        }
    }        
}
void add_edge(int n){
    for(int i = 0; i<n; i++){
        ll x,y; cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll t; cin>>t;
    while(t--){
        ll n,a,b; cin>>n>>a>>b;
        ll num = 1;
        while(num<=n){
            if(a==1){
                if((n-1)%b==0)num=n;
                else break;
            }
            if(num%b==n%b){
                num = n;
                break;
            }
            num = num*a;
            
        }
        if(num==n)cout<<"Yes"<<endl;
        else cout<<"No"<<endl;
    }
    return 0;
}
