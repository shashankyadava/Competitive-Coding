D. Required Length
time limit per test2 seconds
memory limit per test512 megabytes
inputstandard input
outputstandard output
You are given two integer numbers, n and x. You may perform several operations with the integer x.

Each operation you perform is the following one: choose any digit y that occurs in the decimal representation of x at least once, and replace x by x⋅y.

You want to make the length of decimal representation of x (without leading zeroes) equal to n. What is the minimum number of operations required to do that?

Input
The only line of the input contains two integers n and x (2≤n≤19; 1≤x<10n−1).

Output
Print one integer — the minimum number of operations required to make the length of decimal representation of x (without leading zeroes) equal to n, or −1 if it is impossible.

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

vector<pair<ll,ll>>index1 = {
    {1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1},{1,1}
};
const int N = 100000;
vector<int>adj[N];
int visi[N];
void dfs(int v){
    int parent = v;
    visi[parent] = 1;
    for(int child: adj[parent]){
        if(visi[child])continue;

        dfs(child);
    }
}

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    vector<int>ans;
    int vis[100001] = {0};
    queue<int>q;
    q.push(0);
    vis[0] = 1;
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        ans.push_back(parent);
        for(int child: adj[parent]){
            if(vis[child])continue;
            q.push(child);
            vis[child] = 1;
        }
    }
    return ans;
}
bool cycleindirectedgraph(int parent,vector<bool>&visited,vector<bool>&dfsvisited){
    visited[parent] = true;
    dfsvisited[parent] = true;
    for(auto child: adj[parent]){
        if(!visited[child]){
            if(cycleindirectedgraph(child,visited,dfsvisited)){
                return true;
            }
        }
        if(visited[child]&&dfsvisited[child]){
            return true;
        }
    }
    return false;
}
ll binaryexponentiation(ll a,ll b){
    if(b==0)return 1;
    ll res = binaryexponentiation(a,b/2);
    if(b%2) return res*res*a;
    else return res*res;
}

void SieveOfEratosthenes(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++){
        if (prime[p] == true){
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= n; p++){
        if (prime[p]){
            cout<<p<<" ";
        }
    }        
}
void add_edge(int n){
    for(int i = 0; i<n; i++){
        ll x,y; cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}
void setIO(string name="") {  // name is nonempty for USACO file I/O
	if (!name.empty()) {
		freopen((name+".in").c_str(), "r", stdin);  // see Input & Output
		freopen((name+".out").c_str(), "w", stdout);
	}
}
void dsu(){
    // vector<ll>parent(100005,-1);
    // vector<pair<ll,ll>>ans;
    // vector<ll>r(100005,0);
    // int f(ll a){
    //     if(parent[a]<0)return a;
    //     return parent[a] = f(parent[a]);
    // }
    // void u(ll a,ll b){
    //     ll x = f(a);
    //     ll y = f(b);
    //     if(x==y){
    //         ans.push_back({a,b});
    //         return;
    //     }
    //     else{
    //         if(r[b]>r[a]){
    //             swap(a,b);
    //         }
    //         if(r[a]==r[b]){
    //             r[a]++;
    //         }
    //         parent[x] = y; 
    //     }
    // }
}
// map<ll,ll>mp;
// int recur(ll n,ll x){
//     string s = to_string(x);
//     // cout<<s<<" "<<s.size()<<endl;
//     if(s.size()>n)return 1e8;
//     if(s.size()==n)return 0;
//     if(mp.count(x))return mp[x];
//     int minn = 1e8;
//     mp[x] = 1e9;
//     for(int i = 0; i<s.size(); i++){
//         int num = s[i]-'0';
//         if(num!=1&&num!=0){
//             // cout<<x<<" "<<num<<endl;
//             ll temp = 1+recur(n,x*num);
//             // cout<<temp<<endl;
//             minn = min((ll)minn,temp);
//         }
        
//     }
//     return mp[x] = minn;
// }
int main(){
    //setIO("filename");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n,x; cin>>n>>x;
    // int ans = recur(n,x);
    // if(ans >= 1e8)ans = -1;
    // cout << ans << endl;
    queue<ll>q;
    q.push(x);
    map<ll,ll>level;
    level[x] = 0;
    while(!q.empty()){
        ll parent = q.front();
        q.pop();
        string s = to_string(parent);
        if(s.size()==n){
            cout<<level[parent]<<endl;
            return 0;
        }
        for(auto c:s){
            ll child = c-'0'; 
            if(child==0)continue;
            child = child*parent;
            if(!level.count(child)){
                q.push(child);
                level[child] = level[parent]+1;
            }
        }
    }
    cout<<-1<<endl;
    return 0;
}
