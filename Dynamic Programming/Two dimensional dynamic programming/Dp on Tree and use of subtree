C. Infected Tree

Byteland is a beautiful land known because of its beautiful trees.

Misha has found a binary tree with n vertices, numbered from 1 to n. A binary tree is an acyclic connected bidirectional graph containing n vertices and nâˆ’1 edges. Each vertex has a degree at most 3, whereas the root is the vertex with the number 1 and it has a degree at most 2.

Unfortunately, the root got infected.

The following process happens n times:

Misha either chooses a non-infected (and not deleted) vertex and deletes it with all edges which have an end in this vertex or just does nothing.
Then, the infection spreads to each vertex that is connected by an edge to an already infected vertex (all already infected vertices remain infected).
As Misha does not have much time to think, please tell him what is the maximum number of vertices he can save from the infection (note that deleted vertices are not counted as saved).

CODE::

// #include<bits/stdc++.h>
// using namespace std;
// #define ll long long
// ll subtree(ll parent,vector<ll>graph[],ll cnt[],ll g){
//     ll curr = 0;
//     for(ll child :graph[parent]){
//         if(child!=g)curr+=subtree(child,graph,cnt,parent);
//     }
//     cnt[parent] = curr;
//     return 1+curr;
// }
// ll recur(ll parent,int flag,vector<vector<ll>>dp,vector<ll>graph[],ll cnt[],ll g){
//     vector<ll>v;
//     for(auto child:graph[parent]){
//         if(child!=g){
//             v.push_back(child);
//         }
//     }
//     if(v.size()==0)return dp[parent][flag] = 0;
//     if(v.size()==1)return dp[parent][flag] = cnt[v[0]];
//     if(dp[parent][flag]!=-1)return dp[parent][flag];
//     return dp[parent][flag] = max(cnt[v[0]]+recur(v[1],1,dp,graph,cnt,parent),cnt[v[1]]+recur(v[0],0,dp,graph,cnt,parent));
// }
// // int recur()
// int main(){
//     ios_base::sync_with_stdio(0);
//     cin.tie(0);
//     ll t; cin>>t;
//     while(t--){
//         ll n; cin>>n;
        
//         vector<ll>graph[n+1];
//         for(int i = 0; i<=n; i++)graph[i].clear();
//         // for(int i = 0; i<=n; i++)visited[i] = false;
//         // for(int i = 0; i<=n; i++)cnt[i] = 0;
//         for(int i = 0; i<n-1; i++){
//             ll x,y; cin>>x>>y;
//             graph[x].push_back(y);
//             graph[y].push_back(x);
//         }
//         // for(int i = 1; i<=n; i++){
//         //     for(int j = 0; j<graph[i].size(); j++){
//         //         cout<<graph[i][j]<<" ";
//         //     }
//         //     cout<<endl;
//         // }
//         ll cnt[n+1];
//         subtree(1,graph,cnt,-1);
//         // for(int i = 1; i<=n; i++){
//         //     cout<<cnt[i]<<" ";
//         // }
//         // cout<<endl;
//         vector<vector<ll>>dp(n+1,vector<ll>(2,-1));
//         cout<<recur(1,0,dp,graph,cnt,-1)<<endl;;
//     }
//     return 0;
// }
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;
#define mp make_pair
#define pb push_back
#define in insert
#define se second
#define fi first
typedef vector<long long int> vl;
typedef vector<vector<long long int>> vvl;
typedef vector<pair<long long int,long long int>> vpl;
typedef vector<pair<int,int>> vpi;
typedef pair<long long int,long long int> pll;
typedef vector<int> vi;
typedef unordered_map<long long int , long long int> umap;
typedef map<long long int,long long int> smap;
typedef unordered_map<string , long long int> slumap;
typedef unordered_map<string , string> sumap;
typedef multimap<string , string> smul;

ll func(vl adj[],vl &child,ll i,ll p){
    ll c=0;
    for(auto &j : adj[i]){
        if(j!=p){
            c+=func(adj,child,j,i);
        }
    }
    child[i]=c;
    return 1+c;
}

ll fun(vl adj[],vl &child,ll i,ll p,ll f,vvl &dp){
    vl v;
    for(auto &j : adj[i]){
        if(j!=p){
            v.pb(j);
        }
    }
    if(dp[i][f]!=-1)return dp[i][f];
    if(v.size()==0)return 0;
    if(v.size()==1)return child[v[0]];
    return dp[i][f] = max(child[v[0]]+fun(adj,child,v[1],i,1,dp),child[v[1]]+fun(adj,child,v[0],i,0,dp));
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin>>t;
    while(t--){
        ll n;
        cin>>n;
        vl adj[n+1];
        for(int i=1;i<n;i++){
            ll x,y;
            cin>>x>>y;
            adj[x].pb(y);
            adj[y].pb(x);
        }
        vl child(n+1,0);
        func(adj,child,1,-1);
        vvl dp(n+1,vl(3,-1));
        cout<<fun(adj,child,1,-1,2,dp)<<endl;
    }
    return 0;
}
