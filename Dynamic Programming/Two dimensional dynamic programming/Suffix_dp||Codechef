#include <bits/stdc++.h>
using namespace std;

/*<--------------------------------somthing use'phul'------------------------------------------------>*/
#define input(arr,n)       for(int i=0;i<n;++i) cin>>arr[i];
#define output(arr,n)      for(int i=0;i<n;++i){cout<<arr[i]<<' ';}cout<<"\n";
#define sz(x)              ((int)(x).size())
#define all(x)             (x).begin(),(x).end()
#define pb(a)              emplace_back(a)
#define mp(a,b)            make_pair(a,b)
#define ff                 first
#define ss                 second
#define put(a)             cout<<a<<'\n'
#define putp(a,x)          cout<<fixed<<setprecision(x)<<a<<'\n'
#define exit(a)            cout<<a<<'\n';return
#define google(t,ans)      cout<<"Case #"<<t<<": "<<ans<<'\n';
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<bool> vb;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vpii;
const ll mod = 1e9 + 7;
const ll mod2 = 998244353;
const ll inf = 1e18;
const vpii dr4 = {{1, 0}, {0, 1}, { -1, 0}, {0, -1}};
const string alpha = "abcdefghijklmnopqrstuvwxyz";
/*<------------------------------somthing use'phul' 2.o----------------------------------------------->*/
bool isPowerof2(ll n) {if (n == 0) return 0; if (n == 1) return 0; return ((n & (~(n - 1))) == n);}
bool isPrime(ll n) {for (ll i = 2; (i * i) <= n; ++i) if (n % i == 0) return 0; return 1;}
bool isVowel(char ch) {return (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');}
ll modifyBit(ll num, int pos, int bit) {int mask = 1 << pos; return ((num & ~mask) | (bit << pos));}
ll gcd(ll a, ll b);
ll lcm(ll a, ll b) {return (ll)((a * b) / gcd(a, b));}
ll sumTillN(ll n) {return (n * (n + 1)) >> 1;}
ll accurateFloor(ll a, ll b);
ll power(ll x, ll y, ll mod);
ll modInverse(ll a, ll m) {return 1ll * power(a, m - 2, m);}
void sieve(vll &prime, int N);
/*<-------------------------------------CustomHash----------------------------------------------->*/
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
/*<---------------------------------------------------------------------------------------------------->*/
//1. 1ll<<x is same as pow(2,x)
//2. 1<<i refering to ith pos in a number's binary rep
// eg.  n&(1<<i)
// if (arr[j] & (1 << i)) (when i write the same thing it doesn't work)
//3. ll mid = low + ((high - low) >> 1);
//4.always use set.lower_bound().....
//5. to remove duplicats from  array
// sort(all(arr));
// n = unique(all(arr)) - arr.begin();
// now n is size of duplicate free vector

ll oniiChanGiveMeAns(int i, int j, int n, int m, vector<vll> &suffixRows, vector<vll> &suffixCols, vector<vector<vll>> &dp, bool goLeft) {
    if (i < 0 || i >= n || j < 0 || j >= m) return 0;
    if (dp[goLeft][i][j] != -1) return dp[goLeft][i][j];

    ll res = 0;

    // allow left
    if (goLeft) {
        ll allowLeft = suffixCols[i][j] + oniiChanGiveMeAns(i, j + 1, n, m, suffixRows, suffixCols, dp, 1);
        ll allowTop = suffixCols[i][j] + oniiChanGiveMeAns(i, j + 1, n, m, suffixRows, suffixCols, dp, 0);
        res = max(allowTop, allowLeft);
    }
    else {
        ll allowLeft = suffixRows[i][j] + oniiChanGiveMeAns(i + 1, j, n, m, suffixRows, suffixCols, dp, 1);
        ll allowTop = suffixRows[i][j] + oniiChanGiveMeAns(i + 1, j, n, m, suffixRows, suffixCols, dp, 0);
        res = max(allowTop, allowLeft);
    }
    // cout << goLeft << ' ' << i << ' ' << j << ' ' << res << '\n';
    return dp[goLeft][i][j] = res;
}

void solve() {
    int n, m; cin >> n >> m;
    vector<vll> a(n, vll(m)), b(n, vll(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) cin >> b[i][j];
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) cin >> a[i][j];
    }
    vector<vector<vll> > dp(2, vector<vll>(n, vll(m, -1)));
    vector<vll> suffixRows(n, vll(m, 0)), suffixCols(n, vll(m, 0));

    for (int i = 0; i < n; ++i) {
        for (int j = m - 1; j >= 0; --j) {
            suffixRows[i][j] = a[i][j];
            suffixRows[i][j] += (j == m - 1 ? 0 : suffixRows[i][j + 1]);
        }
    }
    for (int j = 0; j < m; ++j) {
        for (int i = n - 1; i >= 0; --i) {
            suffixCols[i][j] = b[i][j];
            suffixCols[i][j] += (i == n - 1 ? 0 : suffixCols[i + 1][j]);
        }
    }
    ll res = oniiChanGiveMeAns(0, 0, n, m, suffixRows, suffixCols, dp, 1);
    res = max(res, oniiChanGiveMeAns(0, 0, n, m, suffixRows, suffixCols, dp, 0));

    put(res);
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("out1.txt", "w", stdout);
#endif

    /* fast Input-Output  */
    ios::sync_with_stdio(0);
    cin.tie(0);

    ll T; cin >> T;
    while (T--)
        solve();

    //     /*<-----------Kick Start------------>*/

    // for (int t = 1; t <= T; ++t) {

    // }

}


ll power(ll a, ll b, ll mod) {
    if (b == 0) {
        return 1;
    }
    ll ans = power(a, b / 2, mod);
    ans *= ans;
    ans %= mod;
    if (b % 2) {
        ans *= a;
    }
    return ans % mod;
}
ll gcd (ll a, ll b) {
    if (b == 0)
        return a;
    else
        return gcd (b, a % b);
}
ll accurateFloor(ll a, ll b) {
    ll val = a / b;
    while (val * b > a)
        val--;
    return val;
}

void sieve(vll & prime, int N) {
    vector<bool> is_prime(N + 1, 1);
    is_prime[0] = is_prime[1] = false;
    for (ll i = 2; i * i <= N; i++) {
        if (is_prime[i]) {
            for (ll j = i * i; j <= N; j += i)
                is_prime[j] = false;
        }
    }
    for (ll i = 2; i <= N; ++i)
        if (is_prime[i])
            prime.pb(i);
}
