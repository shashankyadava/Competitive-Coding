B. Fake Plastic Trees

We are given a rooted tree consisting of n vertices numbered from 1 to n. The root of the tree is the vertex 1 and the parent of the vertex v is pv.

There is a number written on each vertex, initially all numbers are equal to 0. Let's denote the number written on the vertex v as av.

For each v, we want av to be between lv and rv (lv≤av≤rv).

In a single operation we do the following:

Choose some vertex v. Let b1,b2,…,bk be vertices on the path from the vertex 1 to vertex v (meaning b1=1, bk=v and bi=pbi+1).
Choose a non-decreasing array c of length k of nonnegative integers: 0≤c1≤c2≤…≤ck.
For each i (1≤i≤k), increase abi by ci.
What's the minimum number of operations needed to achieve our goal?

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

void dfs(ll parent,vector<ll> g[],bool vis[],ll sum[],ll self[],ll l[],ll r[]){
    vis[parent] = true;
    for(auto child: g[parent]){
        if(!vis[child]){
            dfs(child,g,vis,sum,self,l,r);
            sum[parent] = sum[parent]+self[child];
        }
    }
    if(sum[parent]<l[parent]){
        self[parent] = r[parent];
    }
    else if(sum[parent]<r[parent]){
        self[parent] = sum[parent];
    }
    else self[parent] = r[parent];
}
int main(){
    //setIO("filename");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll t; cin>>t;
    while(t--){
        ll n; cin>>n;
        bool vis[n+1];
        for(int i = 0; i<=n; i++)vis[i] = false;
        vector<ll>g[n+1];
        for(int i = 2; i<=n; i++){
            int x; cin>>x;
            g[x].push_back(i);
            g[i].push_back(x);
        }
        for(int i = 1; i<=n; i++){
            for(int j = 0; j<g[i].size(); j++){
            }
        }
        ll l[n+1],r[n+1];
        for(int i = 1; i<=n; i++){
            cin>>l[i]>>r[i];
        }
        ll sum[n+1],self[n+1];
        for(int i = 0; i<=n; i++)sum[i]=0,self[i]=0;
        dfs((ll)1,g,vis,sum,self,l,r);
        ll ans = 0;
        for(int i = 1; i<=n; i++){
            if(self[i]>sum[i]){
                ans++;
            }
        }
        cout<<ans<<endl;
    }  
    return 0;
}

