C - Vacation  / 
Time Limit: 2 sec / Memory Limit: 1024 MB

Score : 100 points

Problem Statement
Taro's summer vacation starts tomorrow, and he has decided to make plans for it now.

The vacation consists of N days. For each i (1≤i≤N), Taro will choose one of the following activities and do it on the i-th day:

A: Swim in the sea. Gain a 
i
​
  points of happiness.
B: Catch bugs in the mountains. Gain b 
i
​
  points of happiness.
C: Do homework at home. Gain c 
i
​
  points of happiness.
As Taro gets bored easily, he cannot do the same activities for two or more consecutive days.

Find the maximum possible total points of happiness that Taro gains.

Constraints
All values in input are integers.
1≤N≤10 
5
 
1≤a 
i
​
 ,b 
i
​
 ,c 
i
​
 ≤10 
4
 
Input
Input is given from Standard Input in the following format:

N
a 
1
​
  b 
1
​
  c 
1
​
 
a 
2
​
  b 
2
​
  c 
2
​
 
:
a 
N
​
  b 
N
​
  c 
N
​
 
Output
Print the maximum possible total points of happiness that Taro gains.

Sample Input 1 
Copy
3
10 40 70
20 50 80
30 60 90
Sample Output 1 
Copy
210
If Taro does activities in the order C, B, C, he will gain 70+50+90=210 points of happiness.

Sample Input 2 
Copy
1
100 10 1
Sample Output 2 
Copy
100
Sample Input 3 
Copy
7
6 7 8
8 8 3
2 5 2
7 8 6
4 6 8
2 3 4
7 5 1
Sample Output 3 
Copy
46

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

vector<pair<ll,ll>>index1 = {
    {1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1},{1,1}
};
const int N = 100000;
vector<int>adj[N];
int visi[N];
void dfs(int v){
    int parent = v;
    visi[parent] = 1;
    for(int child: adj[parent]){
        if(visi[child])continue;

        dfs(child);
    }
}

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    vector<int>ans;
    int vis[100001] = {0};
    queue<int>q;
    q.push(0);
    vis[0] = 1;
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        ans.push_back(parent);
        for(int child: adj[parent]){
            if(vis[child])continue;
            q.push(child);
            vis[child] = 1;
        }
    }
    return ans;
}
bool cycleindirectedgraph(int parent,vector<bool>&visited,vector<bool>&dfsvisited){
    visited[parent] = true;
    dfsvisited[parent] = true;
    for(auto child: adj[parent]){
        if(!visited[child]){
            if(cycleindirectedgraph(child,visited,dfsvisited)){
                return true;
            }
        }
        if(visited[child]&&dfsvisited[child]){
            return true;
        }
    }
    return false;
}
ll binaryexponentiation(ll a,ll b){
    if(b==0)return 1;
    ll res = binaryexponentiation(a,b/2);
    if(b%2) return res*res*a;
    else return res*res;
}

void SieveOfEratosthenes(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++){
        if (prime[p] == true){
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= n; p++){
        if (prime[p]){
            cout<<p<<" ";
        }
    }        
}
void add_edge(int n){
    for(int i = 0; i<n; i++){
        ll x,y; cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}
void setIO(string name="") {  // name is nonempty for USACO file I/O
	if (!name.empty()) {
		freopen((name+".in").c_str(), "r", stdin);  // see Input & Output
		freopen((name+".out").c_str(), "w", stdout);
	}
    // freopen("cowdance.in", "r", stdin);
	// freopen("cowdance.out", "w", stdout);
}
int n;
//first form of recursion
// int dp[100005][2][2][2];
// int recur(vector<vector<int>>&v,int index,int check1,int check2, int check3){
//     // base case 
//     if(index>=v.size())return dp[index][check1][check2][check3] = 0;
//     int task1 = 0,task2 = 0,task3 = 0;
//     if(dp[index][check1][check2][check3]!=-1)return dp[index][check1][check2][check3];
//     if(check1==0)task1 = v[index][0]+recur(v,index+1,1,0,0);
//     if(check2==0)task2 = v[index][1]+recur(v,index+1,0,1,0);
//     if(check3==0)task3 = v[index][2]+recur(v,index+1,0,0,1);
//     return dp[index][check1][check2][check3] = max({task1,task2,task3});
// }
//second form of recursion
// int dpp[100005][4];
// int recur(vector<vector<int>>&v,int index,int last){
//     if(index<0)return 0;
//     int maxx = 0;
//     if(dpp[index][last]!=-1)return dpp[index][last];
//     for(int task = 0; task<3; task++){
//         if(last!=task){
//             int points = v[index][task]+recur(v,index-1,task);
//             maxx = max(maxx,points);
//         }
//     }
//     return dpp[index][last] = maxx;
// }
int main(){
    //setIO("filename");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin>>n;
    vector<vector<int>>v(n,vector<int>(3));
    for(int i = 0; i<n; i++){
        for(int j = 0; j<3; j++){
            cin>>v[i][j];
            // cout<<v[i][j]<<" ";
        }
        // cout<<endl;
    }
    // memset(dpp,-1,sizeof(dpp));
    // cout<<recur(v,0,0,0,0)<<endl;;
    // cout<<endl;
    // cout<<recur(v,n-1,3)<<endl;

    //tabulation form of recursion
    vector<vector<int>>dp(n,vector<int>(3));
    dp[0][0] = max(v[0][1],v[0][2]);
    dp[0][1] = max(v[0][0],v[0][2]);
    dp[0][2] = max(v[0][0],v[0][1]);
    dp[0][3] = max({v[0][0],v[0][1],v[0][2]});
    for(int day = 1; day<n; day++){
        for(int last = 0; last<4; last++){
            dp[day][last] = 0;
            for(int task = 0; task<3; task++){
                if(last!=task)dp[day][last] = max(dp[day][last],v[day][task]+dp[day-1][task]);
            }
        }
        
    }
    cout<<dp[n-1][3]<<endl;
    return 0;
}
