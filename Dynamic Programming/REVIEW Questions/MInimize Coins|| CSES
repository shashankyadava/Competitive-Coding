

Consider a money system consisting of n coins. Each coin has a positive integer value. Your task is to produce a sum of money x using the available coins 
in such a way that the number of coins is minimal.

For example, if the coins are {1,5,7} and the desired sum is 11, an optimal solution is 5+5+1 which requires 3 coins.

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

vector<pair<ll,ll>>index1 = {
    {1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1},{1,1}
};
const int N = 100000;
vector<int>adj[N];
int visi[N];
void dfs(int v){
    int parent = v;
    visi[parent] = 1;
    for(int child: adj[parent]){
        if(visi[child])continue;

        dfs(child);
    }
}

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    vector<int>ans;
    int vis[100001] = {0};
    queue<int>q;
    q.push(0);
    vis[0] = 1;
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        ans.push_back(parent);
        for(int child: adj[parent]){
            if(vis[child])continue;
            q.push(child);
            vis[child] = 1;
        }
    }
    return ans;
}
bool cycleindirectedgraph(int parent,vector<bool>&visited,vector<bool>&dfsvisited){
    visited[parent] = true;
    dfsvisited[parent] = true;
    for(auto child: adj[parent]){
        if(!visited[child]){
            if(cycleindirectedgraph(child,visited,dfsvisited)){
                return true;
            }
        }
        if(visited[child]&&dfsvisited[child]){
            return true;
        }
    }
    return false;
}
ll binaryexponentiation(ll a,ll b){
    if(b==0)return 1;
    ll res = binaryexponentiation(a,b/2);
    if(b%2) return res*res*a;
    else return res*res;
}

void SieveOfEratosthenes(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++){
        if (prime[p] == true){
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= n; p++){
        if (prime[p]){
            cout<<p<<" ";
        }
    }        
}
void add_edge(int n){
    for(int i = 0; i<n; i++){
        ll x,y; cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}
// ll dp[1000005];
// ll recur(ll n,ll sum,vector<ll>&v){
//     if(sum==0)return 0;
//     if(dp[sum]!=-1)return dp[sum];
//     ll res = 1000000;
//     for(ll i = 1; i<=n; i++){
//         if(sum-v[i]>=0){  
//             res = min(res,1+recur(n,sum-v[i],v));
//         }
//     }
//     return dp[sum] = res;
// }
ll dp1[1000001];
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n,sum; cin>>n>>sum;
    vector<ll>v(n);
    for(ll i = 0; i<n; i++){
        cin>>v[i];
    }
    
    // memset(dp,-1,sizeof(dp));
    // ll ans = recur(n,sum,v);
    // if(ans==sky)cout<<-1<<endl;
    // else cout<<ans<<endl;
    
    for(int i = 0; i<=sum; i++){
        dp1[i] = INT_MAX;
    }
    dp1[0] = 0;
    for(ll i = 1; i<=n; i++){
        for(ll weight = 0; weight<=sum; weight++){
            if(weight-v[i-1]>=0){
                // cout<<weight<<" "<<v[i-1]<<endl;
                dp1[weight] = min(dp1[weight],1+dp1[weight-v[i-1]]);
            }
            
        }
    }
    // for(int i = 0; i<=sum; i++){
    //     cout<<dp1[i]<<" ";
    // }
    // cout<<endl;
    cout<<(dp1[sum]==INT_MAX?-1:dp1[sum])<<endl;;
    return 0;
}
