You are in a book shop which sells n different books. You know the price and number of pages of each book.
You have decided that the total price of your purchases will be at most x. What is the maximum number of pages you can buy? You can buy each book at most once.

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

vector<pair<ll,ll>>index1 = {
    {1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1},{1,1}
};
const int N = 100000;
vector<int>adj[N];
int visi[N];
void dfs(int v){
    int parent = v;
    visi[parent] = 1;
    for(int child: adj[parent]){
        if(visi[child])continue;

        dfs(child);
    }
}

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    vector<int>ans;
    int vis[100001] = {0};
    queue<int>q;
    q.push(0);
    vis[0] = 1;
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        ans.push_back(parent);
        for(int child: adj[parent]){
            if(vis[child])continue;
            q.push(child);
            vis[child] = 1;
        }
    }
    return ans;
}
bool cycleindirectedgraph(int parent,vector<bool>&visited,vector<bool>&dfsvisited){
    visited[parent] = true;
    dfsvisited[parent] = true;
    for(auto child: adj[parent]){
        if(!visited[child]){
            if(cycleindirectedgraph(child,visited,dfsvisited)){
                return true;
            }
        }
        if(visited[child]&&dfsvisited[child]){
            return true;
        }
    }
    return false;
}
ll binaryexponentiation(ll a,ll b){
    if(b==0)return 1;
    ll res = binaryexponentiation(a,b/2);
    if(b%2) return res*res*a;
    else return res*res;
}

void SieveOfEratosthenes(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++){
        if (prime[p] == true){
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= n; p++){
        if (prime[p]){
            cout<<p<<" ";
        }
    }        
}
void add_edge(int n){
    for(int i = 0; i<n; i++){
        ll x,y; cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}


// ll recur(ll n,ll sum){
//     if(n==0)return 0;
//     if(sum==0)return 0;
//     if(dp[n][sum]!=-1)return dp[n][sum];
//     if(sum-a[n-1]>=0){
//         return dp[n][sum] = max(recur(n-1,sum),b[n-1]+recur(n-1,sum-a[n-1]));
//     }
//     else return dp[n][sum] = recur(n-1,sum);
    
// }
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n,sum; cin>>n>>sum;
    vector<int>a(n+1),b(n+1);
    for(int i = 1; i<=n; i++){
        cin>>a[i];
    }
    for(int i = 1; i<=n; i++){
        cin>>b[i];
    }

    // memset(dp,-1,sizeof(dp));
    // cout<<recur(n,sum)<<endl;
    int dp[n+1][sum+1];
    memset(dp,0,sizeof(dp));
    for(int i = 1; i<=n; i++){
        for(int money = 0; money<=sum; money++){
            if(i==0||money==0){
                dp[i][money] = 0;
            }
            else if(money-a[i]>=0){
                dp[i][money] = max(dp[i-1][money],b[i]+dp[i-1][money-a[i]]);
            }
            else dp[i][money] = dp[i-1][money];
        }
    }
    // for(int i = 1; i<=n; i++){
    //     for(int money = 0; money<=sum; money++){
    //         cout<<dp[i][money]<<" ";
    //     }
    //     cout<<endl;
    // }
    // cout<<endl;
    cout<<dp[n][sum]<<endl;
    return 0;
}
