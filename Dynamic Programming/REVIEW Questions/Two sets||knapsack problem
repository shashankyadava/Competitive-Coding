                                                                      ||Knapsack problem||

Your task is to count the number of ways numbers 1,2,â€¦,n can be divided into two sets of equal sum.

For example, if n=7, there are four solutions:
{1,3,4,6} and {2,5,7}
{1,2,5,6} and {3,4,7}
{1,2,4,7} and {3,5,6}
{1,6,7} and {2,3,4,5}

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
// #define mod 1000000007
// ll dp[501][501];
// great 0-1 knapsack problem
int main(){
    // ios_base::sync_with_stdio(0);
    // cin.tie(0);
    int mod = 1e9+7;
    int n; cin>>n;
    
    // let's see first if n is even then target sum would be n*(n+1)/2
    // else if n is odd then it cannot be divided into two equal halves 
    int target = n*(n+1)/2;
    if(target%2){
        cout<<0<<endl;
        return 0;
    }
    target = target/2;
    vector<vector<int>> dp(n,vector<int>(target+1,0));
    // memset(dp,0,sizeof(dp));
    dp[0][0] = 1;
    for(int i = 1; i<n; i++){
        for(int j = 0; j<=target; j++){
            dp[i][j] = dp[i-1][j];
            int left = j-i;
            if (left >= 0) {
                (dp[i][j] += dp[i-1][left])%=mod;
            }
            // dp[i][j] = dp[i][j]%mod;
        }
    }
    cout<<dp[n-1][target]<<endl;
    return 0;
}
