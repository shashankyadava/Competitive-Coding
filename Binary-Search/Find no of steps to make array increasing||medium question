C. Increasing by Modulo
time limit per test2.5 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
Toad Zitz has an array of integers, each integer is between 0 and m−1 inclusive. The integers are a1,a2,…,an.

In one operation Zitz can choose an integer k and k indices i1,i2,…,ik such that 1≤i1<i2<…<ik≤n. He should then change aij to ((aij+1)modm) for each chosen integer ij. The integer m is fixed for all operations and indices.

Here xmody denotes the remainder of the division of x by y.

Zitz wants to make his array non-decreasing with the minimum number of such operations. Find this minimum number of operations.

Input
The first line contains two integers n and m (1≤n,m≤300000) — the number of integers in the array and the parameter m.

The next line contains n space-separated integers a1,a2,…,an (0≤ai<m) — the given array.

Output
Output one integer: the minimum number of described operations Zitz needs to make his array non-decreasing. If no operations required, print 0.

It is easy to see that with enough operations Zitz can always make his array non-decreasing.

Examples
inputCopy
5 3
0 0 0 1 2
outputCopy
0
inputCopy
5 7
0 6 1 3 2
outputCopy
1
Note
In the first example, the array is already non-decreasing, so the answer is 0.

In the second example, you can choose k=2, i1=2, i2=5, the array becomes [0,0,1,3,3]. It is non-decreasing, so the answer is 1.

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

vector<pair<ll,ll>>index1 = {
    {1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1},{1,1}
};
const int N = 100000;
vector<int>adj[N];
int visi[N];
void dfs(int v){
    int parent = v;
    visi[parent] = 1;
    for(int child: adj[parent]){
        if(visi[child])continue;

        dfs(child);
    }
}

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    vector<int>ans;
    int vis[100001] = {0};
    queue<int>q;
    q.push(0);
    vis[0] = 1;
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        ans.push_back(parent);
        for(int child: adj[parent]){
            if(vis[child])continue;
            q.push(child);
            vis[child] = 1;
        }
    }
    return ans;
}
bool cycleindirectedgraph(int parent,vector<bool>&visited,vector<bool>&dfsvisited){
    visited[parent] = true;
    dfsvisited[parent] = true;
    for(auto child: adj[parent]){
        if(!visited[child]){
            if(cycleindirectedgraph(child,visited,dfsvisited)){
                return true;
            }
        }
        if(visited[child]&&dfsvisited[child]){
            return true;
        }
    }
    return false;
}
ll binaryexponentiation(ll a,ll b){
    if(b==0)return 1;
    ll res = binaryexponentiation(a,b/2);
    if(b%2) return res*res*a;
    else return res*res;
}

void SieveOfEratosthenes(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++){
        if (prime[p] == true){
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= n; p++){
        if (prime[p]){
            cout<<p<<" ";
        }
    }        
}
void add_edge(int n){
    for(int i = 0; i<n; i++){
        ll x,y; cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}
bool solve(ll steps,ll n,vector<ll>&v,ll m){
    ll prev = 0;
    for(int i = 0; i<n; i++){
        if(prev<=v[i]){
            ll need = m-(v[i]-prev);
            if(need>steps){
                prev = v[i];
            }
        }
        else{
            ll need = prev-v[i];
            if(need>steps)return false;
        }
    }
    return true;
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n,m; cin>>n>>m;
    vector<ll>v(n);
    for(int i = 0; i<n; i++){
        cin>>v[i];
    }
    ll low = 0,high = m;
    ll ans = 0;
    while(low<=high){
        ll mid = low+(high-low)/2;
        // cout<<mid<<endl;
        if(solve(mid,n,v,m)){
            ans = mid;
            high = mid-1;
        }
        else{
            low = mid+1;
        }
    }
    cout<<ans<<endl;
    return 0;
}
