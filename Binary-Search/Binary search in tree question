                                                                  C. Tree Infection
                                                                  time limit per test1 second
                                                                  memory limit per test256 megabytes
                                                                  inputstandard input
                                                                  outputstandard output
                                                                  
A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a vertex v (different from root) is the previous to v vertex on the shortest path from the root to the vertex v. Children of the vertex v are all vertices for which v is the parent.

You are given a rooted tree with n vertices. The vertex 1 is the root. Initially, all vertices are healthy.

Each second you do two operations, the spreading operation and, after that, the injection operation:

Spreading: for each vertex v, if at least one child of v is infected, you can spread the disease by infecting at most one other child of v of your choice.
Injection: you can choose any healthy vertex and infect it.
This process repeats each second until the whole tree is infected. You need to find the minimal number of seconds needed to infect the whole tree.

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll t; cin>>t;
    while(t--){
        ll n; cin>>n;
        vector<ll>v(n);
        vector<ll>a;
        map<ll,ll>mp;
        for(int i = 0; i<n-1; i++){
            cin>>v[i];
            // cout<<v[i]<<endl;
            mp[v[i]]++;
        }
        for(auto it:mp){
        //    cout<<it.second<<" "<<it.first<<" "; 
            a.push_back(it.second);
        }
        // cout<<endl;
        sort(a.rbegin(),a.rend());
        // for(int i = 0; i<a.size(); i++){
        //     cout<<a[i]<<" ";
        // }
        // cout<<endl;
        ll ans = 0;
        ll low = 0,high = n+10;
        while(low<=high){
            ll mid = low+(high-low)/2;
            ll cnt = a.size()+1;
            for(int i = 0; i<a.size(); i++){
                ll num = a[i];
                if(mid-i<num){
                    cnt+=num-(mid-i);
                }
            }
            // cout<<mid<<" "<<cnt<<endl;
            if(mid>=cnt){
                // cout<<mid<<" "<<cnt<<endl;
                ans = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        cout<<ans<<endl;
    }
    return 0;
}
