A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, 
or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].

CODE::

class Solution {
public:
    bool check(string &a,string &b){
        int count = 0;
        for(int i = 0; i<a.size(); i++){
            if(a[i]!=b[i])count++;
        }
        if(count==1)return true;
        else return false;
    }
    vector<vector<string>>ans;
    vector<string>temp;
    unordered_map<string,int>mp;
    string b;
    void recur(string &t,vector<string> &wordList){
        temp.push_back(t);
        if(t==b){
            vector<string>x = temp;
            reverse(x.begin(),x.end());
            ans.push_back(x);
            temp.pop_back();
            return;
        }
        int curr = mp[t];
        for(int i = 0; i<wordList.size(); i++){
            if(check(wordList[i],t)&&mp[wordList[i]]==curr-1){
                recur(wordList[i],wordList);
            }
        }
        temp.pop_back();
    }
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        b = beginWord;
        queue<string>q;
        q.push(beginWord);
        mp[beginWord] = 1;
        while(!q.empty()){
            int sz = q.size();
            while(sz--){
                string parent = q.front();
                q.pop();
                int curr = mp[parent]+1;
                for(int i = 0; i<wordList.size(); i++){
                    if(!mp[wordList[i]]&&check(parent,wordList[i])){
                        mp[wordList[i]] = curr;
                        q.push(wordList[i]);
                    }
                }
            }
        }
        bool flag = 0;
        for(int i = 0; i<wordList.size(); i++){
            if(wordList[i]==beginWord){
                flag = 1;
                break;
            }
        }
        if(flag==0)wordList.push_back(beginWord);
        if(mp[endWord])recur(endWord,wordList);
        return ans;
    }
};
