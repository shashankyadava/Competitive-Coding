There are M job applicants and N jobs. Each applicant has a subset of jobs that he/she is interested in. Each job opening can only accept one applicant 
and a job applicant can be appointed for only one job. Find an assignment of jobs to applicants in such that as many applicants as possible get jobs.

LINK:https://www.geeksforgeeks.org/maximum-bipartite-matching/

CODE::

int visited[101];
    bool seen[101];
    int dfs(vector<vector<int>>&graph,int x){
        for(int i = 0; i<graph[0].size(); i++){
            if(!seen[i]&&graph[x][i]==1){
                seen[i] = true;
                if(visited[i]<0||dfs(graph,visited[i])){
                    visited[i] = x;
                    return true;
                }
            }
        }
        return false;
    }
	int maximumMatch(vector<vector<int>>&G){
	    int ans = 0;
	    memset(visited,-1,sizeof(visited));
	    for(int i = 0; i<G.size(); i++){
	        memset(seen,0,sizeof(seen));
	        if(dfs(G,i))ans++;
	    }
	    return ans;
	}
