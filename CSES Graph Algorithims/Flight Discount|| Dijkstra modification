#include<bits/stdc++.h>
using namespace std;
#define ll long long
const ll INF = 1e17;
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n,m; cin>>n>>m;
    vector<ll>dist(100005,INF);
    vector<ll>disc(100005,INF);
    vector<pair<ll,ll>>g[n+1];
    for(int i = 0; i<m; i++){
        ll x,y,wt; cin>>x>>y>>wt;
        g[x].push_back({y,wt});
    }
    priority_queue<pair<ll,pair<ll,ll>>,vector<pair<ll,pair<ll,ll>>>,greater<pair<ll,pair<ll,ll>>>>q;
    q.push({0,{1,0}});
    dist[1] = 0;
    disc[1] = 0;
    while(!q.empty()){
        ll p_dist = q.top().first;
        ll parent = q.top().second.first;
        ll flag = q.top().second.second;
        q.pop();
        if(flag==0){
            if(p_dist!=dist[parent])continue;
        }
        else{
            if(p_dist!=disc[parent])continue;
        }
        for(auto child: g[parent]){
            ll curr_dist = child.second;
            ll curr_parent = child.first;
            if(flag==1){
                if(disc[curr_parent]>curr_dist+p_dist){
                    disc[curr_parent] = curr_dist+p_dist;
                    q.push({disc[curr_parent],{curr_parent,1}});
                }
            }
            else{
                if(dist[curr_parent]>curr_dist+p_dist){
                    dist[curr_parent] = curr_dist+p_dist;
                    q.push({dist[curr_parent],{curr_parent,0}});
                }
                if(disc[curr_parent]>curr_dist/2+p_dist){
                    disc[curr_parent] = curr_dist/2+p_dist;
                    q.push({disc[curr_parent],{curr_parent,1}});
                }
            }
        }
    }
    cout<<disc[n]<<endl;
    return 0;
}
