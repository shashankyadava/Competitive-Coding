#include <bits/stdc++.h>
using namespace std;
#define ll long long
void dfs1(int parent,vector<int>g[],vector<int>&stack,vector<int>&visited){
    visited[parent] = 1;
    for(auto child: g[parent]){
        // cout<<parent<<" "<<child<<endl;
        if(visited[child]==0){
            dfs1(child,g,stack,visited);
        }
    }
    stack.push_back(parent);
}
void dfs2(int parent,vector<int>g[],vector<int>&visited){
    visited[parent] = 1;
    for(auto child : g[parent]){
        if(visited[child]==0){
            dfs2(child,g,visited);
        }
    }
    // cout<<parent<<endl;
}
int main(){
    // cout<<"n and m"<<endl;
    int n,m; cin>>n>>m;
    vector<int>g[n+1];
    // cout<<"m lines that are connected"<<endl;
    for(int i = 0; i<m; i++){
        int x,y; cin>>x>>y;
        g[x].push_back(y);
    }
    vector<int>visited(n+1);
    for(int i = 0; i<n+1; i++)visited[i] = 0;
    vector<int>rev_graph;
    for(int i = 1; i<=n; i++){
        if(visited[i]==0){
            dfs1(i,g,rev_graph,visited);
        }
    }
    for(int i = 0; i<n+1; i++)visited[i] = 0;
    int count = 0;
    vector<int>v;
    for(int i = rev_graph.size()-1; i>=0; i--){
        // cout<<rev_graph[i]<<" ";
        if(visited[rev_graph[i]]==0){
            count++;
            v.push_back(rev_graph[i]);
            dfs2(rev_graph[i],g,visited);
        }
    }
    
    return 0;
}
