the technique is basically is that if we have to find ar-al = r-l+1 or when some target is given and we have to find number of subarray or the presence of subarray then 
what we can do is use this techinque;

first what you do is make the prefix sum of array 
then take a map
ans+=mp[prefix sum upto that i-target]
mp[prefix sum upto that i-target]++;
cout<<ans<<endl;

NOW There can be many variations regarding that
prefix[r]-prefix[l] = r-l+1;
so what we can do is r-l+1 becomes the target;
we change the formula 

prefix[r]-(r+1) = prefix-(l+1);

which can be used in this technique;

ans+=mp[prefix[i]-(i+1)]
mp[prefix[i]-(i+1)]++;

QUESTION::

C. Good Subarrays
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given an array a1,a2,…,an consisting of integers from 0 to 9. A subarray al,al+1,al+2,…,ar−1,ar is good if the sum of elements of this subarray is equal to the length of this subarray (∑i=lrai=r−l+1).

For example, if a=[1,2,0], then there are 3 good subarrays: a1…1=[1],a2…3=[2,0] and a1…3=[1,2,0].

Calculate the number of good subarrays of the array a.
