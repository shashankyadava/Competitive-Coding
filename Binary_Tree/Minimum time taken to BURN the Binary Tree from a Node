class Solution {
  public:
    void markparent(Node* root,map<Node*,Node*>&parent){
        queue<Node*>q;
        q.push(root);
        while(!q.empty()){
            Node* p = q.front();
            q.pop();
            if(p->left){
                q.push(p->left);
                parent[p->left] = p;
            }
            if(p->right){
                q.push(p->right);
                parent[p->right] = p;
            }
        }
    }
    Node* gettarget(Node* root,int target){
        if(root==NULL)return root;
        if(root->data==target){
            return root;
        }
        auto tt = gettarget(root->left,target);
        if(tt!=NULL)return tt;
        auto ss = gettarget(root->right,target);
        if(ss!=NULL)return ss;
        return NULL;
    }
    int minTime(Node* root, int target) 
    {
        map<Node*,Node*>parent;
        markparent(root,parent);
        queue<Node*>q;
        Node* tt = gettarget(root,target);
        q.push(tt);
        int level = 0;
        map<Node*,bool>vis;
        vis[tt] = true;
        while(!q.empty()){
            int n = q.size();
            for(int i = 0; i<n; i++){
                Node* p = q.front();
                q.pop();
                if(p->left&&!vis[p->left]){
                    q.push(p->left);
                    vis[p->left] = true;
                }
                if(p->right&&!vis[p->right]){
                    q.push(p->right);
                    vis[p->right] = true;
                }
                if(parent[p]&&!vis[parent[p]]){
                    q.push(parent[p]);
                    vis[parent[p]] = true;
                }
            }
            level++;
        }
        return level-1;
    }
};
