/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* calc(TreeNode* root){
        if(root->right==NULL){
            return root;
        }
        return calc(root->right);
    }
    TreeNode* recur(TreeNode* root){
        if(root->left==NULL){
            return root->right;
        }
        if(root->right==NULL){
            return root->left;
        }
        TreeNode* rightchild = root->right;
        TreeNode* lastright = calc(root->left);
        lastright->right = rightchild;
        return root->left;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL)return root;
        if(root->val==key){
            return recur(root);
        }
        TreeNode* curr = root;
        while(curr!=NULL){
            if(curr->val<=key){
                if(curr->right!=NULL&&curr->right->val==key){
                    curr->right = recur(curr->right);
                    break;
                }
                else curr = curr->right;
            }
            else{
                if(curr->left!=NULL&&curr->left->val==key){
                    curr->left = recur(curr->left);
                    break;
                }
                else curr = curr->left;
            }
        }
        return root;
    }
};
