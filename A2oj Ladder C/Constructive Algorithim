C. Team

Now it's time of Olympiads. Vanya and Egor decided to make his own team to take part in a programming Olympiad. They've been best friends ever since primary school and hopefully, that can somehow help them in teamwork.

For each team Olympiad, Vanya takes his play cards with numbers. He takes only the cards containing numbers 1 and 0. The boys are very superstitious. They think that they can do well at the Olympiad if they begin with laying all the cards in a row so that:

there wouldn't be a pair of any side-adjacent cards with zeroes in a row;
there wouldn't be a group of three consecutive cards containing numbers one.
Today Vanya brought n cards with zeroes and m cards with numbers one. The number of cards was so much that the friends do not know how to put all those cards in the described way. Help them find the required arrangement of the cards or else tell the guys that it is impossible to arrange cards in such a way.

CODE::

/*
You know I've heard it all before, I'll hear it all again
I know just where I'm going and I know just where I've been
I've seen so many come and go but somehow I survive
I know I will die someday, but I'm glad to be alive
Glad to be alive
The strong survive
 
I've got a life to lead, I care if I succeed
I got to find my way
I've got a life to lead, I take just what I need
That's where I will stay
That's where I'll stay
 
I can't tell the future, I can't give a prophecy
Doing what it take to make my destiny
I can't help but wonder, but much to my surprise
Doing what I want with no trace of compromise
No compromise!
I tell no lies!
 
I've got a life to lead, you know my soul is freed
I'm finding my way
I've got a life to lead, you know my soul is free
'Til the end of the day
 
I don't know who said it first, losers never last
Having no direction can make it end so fast
See so many come and go but somehow I survive
I know I will die someday, but I'm glad to be alive
Glad to be alive
The strong survive
 
I've got a life to lead, I am the hardened breed
I know the way
I've got a life to lead, I am the hardened breed
You know I'm here to stay
Here to stay!
*/
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

vector<pair<ll,ll>>index1 = {
    {1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1},{1,1}
};
const int N = 100000;
vector<int>adj[N];
int visi[N];
void dfs(int v){
    int parent = v;
    visi[parent] = 1;
    for(int child: adj[parent]){
        if(visi[child])continue;

        dfs(child);
    }
}

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    vector<int>ans;
    int vis[100001] = {0};
    queue<int>q;
    q.push(0);
    vis[0] = 1;
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        ans.push_back(parent);
        for(int child: adj[parent]){
            if(vis[child])continue;
            q.push(child);
            vis[child] = 1;
        }
    }
    return ans;
}
bool cycleindirectedgraph(int parent,vector<bool>&visited,vector<bool>&dfsvisited){
    visited[parent] = true;
    dfsvisited[parent] = true;
    for(auto child: adj[parent]){
        if(!visited[child]){
            if(cycleindirectedgraph(child,visited,dfsvisited)){
                return true;
            }
        }
        if(visited[child]&&dfsvisited[child]){
            return true;
        }
    }
    dfsvisited[parent] = false;
    return false;
}
ll binaryexponentiation(ll a,ll b){
    if(b==0)return 1;
    ll res = binaryexponentiation(a,b/2);
    if(b%2) return res*res*a;
    else return res*res;
}

void SieveOfEratosthenes(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++){
        if (prime[p] == true){
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= n; p++){
        if (prime[p]){
            cout<<p<<" ";
        }
    }        
}
void add_edge(int n){
    for(int i = 0; i<n; i++){
        ll x,y; cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}
void setIO(string name="") {  // name is nonempty for USACO file I/O
	if (!name.empty()) {
		freopen((name+".in").c_str(), "r", stdin);  // see Input & Output
		freopen((name+".out").c_str(), "w", stdout);
	}
}
class dsu{

    vector<int>parent;
    vector<pair<ll,ll>>ans;
    vector<ll>r;
    dsu(int n){
        parent.resize(n+1,-1);
        ans.resize(n+1);
        r.resize(n+1,0);
    }
    int f(ll a){
        if(parent[a]<0)return a;
        return parent[a] = f(parent[a]);
    }
    void u(ll a,ll b){
        ll x = f(a);
        ll y = f(b);
        if(x==y){
            ans.push_back({a,b});
            return;
        }
        else{
            if(r[b]>r[a]){
                swap(a,b);
            }
            if(r[a]==r[b]){
                r[a]++;
            }
            parent[x] = y; 
        }
    }
};
class mst{
    struct edges{
        ll a,b,w;
    };
    edges ar[100005];
    vector<ll>parent;
    vector<ll>r;
    mst(int n){
        parent.resize(n+1,-1);
        r.resize(n+1,0);
    }
    int sum;
    bool comp(edges a,edges b){
        if(a.w<b.w)return true;
        else return false;
    }
    int f(ll a){// find with path compression
        if(parent[a]<0)return a;
        return parent[a] = f(parent[a]);
    }
    void u(ll a,ll b){//union by rank
        
        if(r[b]>r[a]){
            swap(a,b);
        }
        parent[b] = a;
        if(r[a]==r[b]){
            r[a]++;
        } 
    }
};
class segtree{
    vector<int>seg;
    segtree(int n){
        seg.resize(4*n+1);
    }
    void build(int ind,int low,int high,int arr[]){
        if(low==high){
            seg[ind] = arr[low];
            return;
        }
        int mid = (low+high)>>2;
        build(2*ind+1,low,mid,arr);
        build(2*ind+2,mid+1,high,arr);
        seg[ind] = min(seg[2*ind+1],seg[2*ind+2]);
    }
    int query(int ind,int low,int high,int l,int r){
        // no overlap
        if(high<l||low>r)return INT_MAX;
        // complete overlap
        if(low>=l&&high<=r)return seg[ind];
        // partial overlap
        int mid = (low+high)/2;
        int left = query(2*ind+1,low,mid,l,r);
        int right = query(2*ind+2,mid+1,high,l,r);
        return min(left,right);
    }
    void update(int ind,int low,int high,int i,int val){
        if(low==high){
            seg[ind] = val;
            return;
        }
        int mid = (low+high)>>2;
        if(i<=mid){
            update(2*ind+1,low,mid,i,val);
        }
        else update(2*ind+2,mid+1,high,i,val);
        seg[ind] = min(seg[2*ind+1],seg[2*ind+2]);
    }
};
int main(){
    //setIO("filename");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n,m; cin>>n>>m;
    ll a = n-1;
    ll b = 2*(n+1);
    if(m<a||m>b)cout<<-1<<endl;
    else{
        if(m==n-1){
            cout<<0;
            for(int i = 0; i<m; i++){
                cout<<10;
            }
            cout<<endl;
        }
        else if(m==n){
            for(int i = 0; i<m; i++){
                cout<<10;
            }
            cout<<endl;
        }
        else{
            ll t = m-(n+1);
            for(int i = 0; i<n; i++){
                if(i<t)cout<<11;
                else cout<<1;
                cout<<0;
            }
            if(m==b)cout<<11;
            else cout<<1;
            cout<<endl;
        }
    }
    return 0;
}
