							//GRAPH PROBLEMS AND iMPLEMENTATION//

InterGames is a high-tech startup company that specializes in developing technology that allows users to play games over the Internet. A market analysis has alerted them 
to the fact that games of chance are pretty popular among their potential customers. Be it Monopoly, ludo or backgammon, most of these games involve throwing dice at 
some stage of the game. Of course, it would be unreasonable if players were allowed to throw their dice and then enter the result into the computer, since cheating would 
be way to easy. So, instead, InterGames has decided to supply their users with a camera that takes a picture of the thrown dice, analyzes the picture and then transmits 
the outcome of the throw automatically. For this they desperately need a program that, given an image containing several dice, determines the numbers of dots on the dice.
We make the following assumptions about the input images. The images contain only three different pixel values: for the background, the dice and the dots on the dice. 
We consider two pixels connected if they share an edge — meeting at a corner is not enough. In the figure, pixels A and B are connected, but B and C are not.
A set S of pixels is connected if for every pair (a; b) of pixels in S, there is a sequence a1; a2; : : : ; ak in S such that a = a1 and b = ak, and ai and ai+1 are 
connected for 1  i < k. We consider all maximally connected sets consisting solely of nonbackground pixels to be dice. ‘Maximally connected’ means that you cannot add 
any other non-background pixels to the set without making it dis-connected. Likewise we consider every maximal connected set of dot pixels to form a dot.

CODE::

#include<bits/stdc++.h>
using namespace std;

int w, h;
char pic[55][55];

void erase(int x, int y) {
  pic[x][y] = '*';

  if (x-1 > 0 && pic[x-1][y] == 'X')
    erase(x-1, y);

  if (y-1 > 0 && pic[x][y-1] == 'X')
    erase(x, y-1);

  if (x + 1 < h && pic[x+1][y] == 'X')
    erase(x+1, y);

  if (y + 1 < w && pic[x][y+1] == 'X')
    erase(x, y+1);
}

int scan(int x, int y) {
  int value = 0;
  pair<int,int> tmp;
  queue< pair<int,int> > q;

  tmp.first = x;
  tmp.second = y;
  q.push(tmp);

  if (pic[x][y] == 'X') {
    value++;
    erase(x, y);
  } else
    pic[x][y] = '.';
    cout<<value<<endl;
  while (!q.empty()) {
    tmp = q.front();
    q.pop();

    if (tmp.first > 0) {
      if (pic[tmp.first-1][tmp.second] == '*') {
        pic[tmp.first-1][tmp.second] = '.';
        q.push(make_pair(tmp.first-1, tmp.second));
      } else if (pic[tmp.first-1][tmp.second] == 'X') {
        value++;
        erase(tmp.first-1, tmp.second);
        q.push(make_pair(tmp.first-1, tmp.second));
      }
    }
    cout<<value<<endl;
    if (tmp.second > 0) {
      if (pic[tmp.first][tmp.second-1] == '*') {
        pic[tmp.first][tmp.second-1] = '.';
        q.push(make_pair(tmp.first, tmp.second-1));
      } else if (pic[tmp.first][tmp.second-1] == 'X') {
        value++;
        erase(tmp.first, tmp.second-1);
        q.push(make_pair(tmp.first, tmp.second-1));
      }
    }
    cout<<value<<endl;
    if (tmp.first + 1 < h) {
      if (pic[tmp.first+1][tmp.second] == '*') {
        pic[tmp.first+1][tmp.second] = '.';
        q.push(make_pair(tmp.first+1, tmp.second));
      } else if (pic[tmp.first+1][tmp.second] == 'X') {
        value++;
        erase(tmp.first+1, tmp.second);
        q.push(make_pair(tmp.first+1, tmp.second));
      }
    }
    cout<<value<<endl;
    if (tmp.second + 1 < w) {
      if (pic[tmp.first][tmp.second+1] == '*') {
        pic[tmp.first][tmp.second+1] = '.';
        q.push(make_pair(tmp.first, tmp.second+1));
      } else if (pic[tmp.first][tmp.second+1] == 'X') {
        value++;
        erase(tmp.first, tmp.second+1);
        q.push(make_pair(tmp.first, tmp.second+1));
      }
    }
    cout<<value<<endl;
  }

  return value;
}

int main(void) {
  int counter = 0;
  vector<int> result;

  while (cin >> w >> h) {
    if (w == 0 && h == 0)
      break;

    counter++;
    result.clear();

    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++)
        cin >> pic[i][j];

    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w; j++) {
        if (pic[i][j] == '*' || pic[i][j] == 'X') {
          int v = scan(i,j);
          if (v > 0)
            result.push_back(v);
        }
      }
    }

    sort(result.begin(), result.end());

    cout << "Throw " << counter << endl;
    for (int i = 0, sz = result.size(); i < sz; i++) {
      if (i > 0)
        cout << " ";
      cout << result[i];
    }
    cout << endl << endl;
  }

  return 0;
}
