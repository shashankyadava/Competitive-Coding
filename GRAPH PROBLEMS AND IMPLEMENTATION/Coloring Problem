You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.

All gardens have at most 3 paths coming into or leaving it.

Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.

Return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.

 

class Solution {
public:
    void dfs(vector<vector<int>>g,vector<int>vis,int src){
        vector<int>used(5);
        for(auto& i:g[src])used[vis[i]]=1;
        for(int i=1;i<=4;i++){
            if(!used[i]){
                vis[src]=i;
                break;
            }
        }
        for(int i = 0; i<vis.size(); i++){
            cout<<vis[i]<<" ";
        }
        cout<<endl;
        for(auto& i:g[src])
            if(!vis[i])dfs(g,vis,i);
    }

    vector<int> gardenNoAdj(int n, vector<vector<int>>& p) {
        vector<vector<int>>g(n);
        vector<int>vis(n);
        for(auto e: p){
            int x = e[0];
            int y = e[1];
            g[x-1].push_back(y-1);
            g[y-1].push_back(x-1);
        }
        for(int i = 0; i<n; i++){
           if(!vis[i]){
               dfs(g,vis,i);
           }
        }
        return vis;
    }
};
