                                                                                MAKEMAZE - VALIDATE THE MAZE
                                                                                          #dfs
                                                                                        MAZE MAKING

 

There are many algorithms to generate maze. (http://en.wikipedia.org/wiki/Maze_generation_algorithm). After generating the maze we’ve to validate whether it’s a valid maze 
or not. A valid maze has exactly one entry point and exactly one exit point (exactly 2 openings in the edges) and there must be atleast one path from the entry point to exit 
point.

Given a maze, just find whether the maze is "valid" or "invalid".

Input Specification:

The first line consists of an integer t, the number of test cases. Then for each test case, the first line consists of two integers m and n, the number of rows and columns 
in the maze. Then contains the description of the matrix M of order mxn. M[i][j]=# represents a wall and M[i][j]='.' represents a space.

Output Specification:

 For each test case find whether the maze is "valid" or "invalid".

Input Constraints:

1<=t<=10000

1<=m<=20

1<=n<=20

Sample Input:

6
4 4
####
#...
#.##
#.##
5 5
#.###
#..##
##..#
#.#.#
###.#
1 1
.
5 1
#
#
.
.
#
2 2
#.
.#
3 4
#..#
#.##
#.##
Sample Output:

valid
valid
invalid
valid
invalid
invalid

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353
char graph[100][100];
ll vis[100][100];
ll point[2][2];
vector<pair<ll,ll>>index1 = {
    {1,0},{0,1},{-1,0},{0,-1}
};
ll n,m;
bool check(int i,int j){
    return i>=0&&j>=0&&i<n&&j<m;
}
void dfs(int i,int j){
    vis[i][j] = 1;
    if(vis[point[1][0]][point[1][1]])return;
    for(int a = 0; a<index1.size(); a++){
        ll x = index1[a].first;
        ll y = index1[a].second;
        if(check(i+x,j+y)&&!vis[i+x][j+y]&&graph[i+x][j+y]=='.'){
            dfs(i+x,j+y);
            
        }
    }
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll t; cin>>t;
    while(t--){
        memset(vis,0,sizeof(vis));
        memset(point,0,sizeof(point));
        cin>>n>>m;
        ll dot = 0;
        bool flag = false;
        for(int i = 0; i<n; i++){
            for(int j  = 0; j<m; j++){
                cin>>graph[i][j];
                if((graph[i][j]=='.')&&(i==0||i==n-1||j==m-1||j==0)){
                    if(dot>=2)flag = true;
                    else{
                        point[dot][0] = i;
                        point[dot][1] = j;
                    }
                    dot++;
                }
            }
        }
        if(dot!=2)cout<<"invalid"<<endl;
        else{
            dfs(point[0][0],point[0][1]);
            // cout<<point[0][0]<<" "<<point[0][1]<<endl;
            // cout<<vis[point[1][0]][point[1][1]]<<endl;
            if(vis[point[1][0]][point[1][1]]){
                cout<<"valid"<<endl;
            }
            else cout<<"invalid"<<endl;
            // cout<<point[1][0]<<" "<<point[1][1]<<endl;
        }
    }
    return 0;
}
