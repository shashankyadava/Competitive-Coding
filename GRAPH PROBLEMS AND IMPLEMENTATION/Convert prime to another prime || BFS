PPATH - Prime Path(Question Spoj)

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353

// vector<pair<ll,ll>>index1 = {
//     {1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1},{1,1}
// };
// const int N = 100000;
// vector<int>adj[N];
// int visi[N];
// void dfs(int v){
//     int parent = v;
//     visi[parent] = 1;
//     for(int child: adj[parent]){
//         if(visi[child])continue;

//         dfs(child);
//     }
// }

// vector<int> bfsOfGraph(int V, vector<int> adj[]) {
//     vector<int>ans;
//     int vis[100001] = {0};
//     queue<int>q;
//     q.push(0);
//     vis[0] = 1;
//     while(!q.empty()){
//         int parent = q.front();
//         q.pop();
//         ans.push_back(parent);
//         for(int child: adj[parent]){
//             if(vis[child])continue;
//             q.push(child);
//             vis[child] = 1;
//         }
//     }
//     return ans;
// }
// bool cycleindirectedgraph(int parent,vector<bool>&visited,vector<bool>&dfsvisited){
//     visited[parent] = true;
//     dfsvisited[parent] = true;
//     for(auto child: adj[parent]){
//         if(!visited[child]){
//             if(cycleindirectedgraph(child,visited,dfsvisited)){
//                 return true;
//             }
//         }
//         if(visited[child]&&dfsvisited[child]){
//             return true;
//         }
//     }
//     return false;
// }
// ll binaryexponentiation(ll a,ll b){
//     if(b==0)return 1;
//     ll res = binaryexponentiation(a,b/2);
//     if(b%2) return res*res*a;
//     else return res*res;
// }

// void SieveOfEratosthenes(int n){
//     bool prime[n + 1];
//     memset(prime, true, sizeof(prime));
//     for (int p = 2; p * p <= n; p++){
//         if (prime[p] == true){
//             for (int i = p * p; i <= n; i += p)
//                 prime[i] = false;
//         }
//     }
//     for (int p = 2; p <= n; p++){
//         if (prime[p]){
//             cout<<p<<" ";
//         }
//     }        
// }
// void add_edge(int n){
//     for(int i = 0; i<n; i++){
//         ll x,y; cin>>x>>y;
//         adj[x].push_back(y);
//         adj[y].push_back(x);
//     }
// }
vector<int>graph[100005];
bool isvalid(int a,int b){
    int count = 0;
    while(a>0){
        if(a%10!=b%10)count++;
        a = a/10,b = b/10;
    }
    if(count==1)return true;
    else        return false;
}
bool primecheck(int n){
    for(int i = 2; i*i<=n; i++){
        if(n%i==0)return false;
    }
    return true;
}
void buildgraph(){
    vector<int>prime;
    for(int i = 1000; i<=9999; i++){
        if(primecheck(i))prime.push_back(i);
    }
    for(int i = 0; i<prime.size(); i++){
        for(int j = i+1; j<prime.size(); j++){
            int a = prime[i];
            int b = prime[j];
            if(isvalid(a,b))graph[a].push_back(b),graph[b].push_back(a);
        }
    }
}
int vis[100005];
int level[100005];
void bfs(int node){
    queue<int>q;
    q.push(node);
    vis[node] = 1;
    level[node] = 0;
    while(!q.empty()){
        int parent = q.front();
        q.pop();
        for(auto child:graph[parent]){
            if(vis[child]==0){
                q.push(child);
                vis[child] = 1;
                level[child] = level[parent]+1;
            }
        }
    }
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    // freopen("closing.in", "r", stdin);
	// freopen("closing.out", "w", stdout);
    buildgraph();
    ll t; cin>>t;
    while(t--){
        ll x,y; cin>>x>>y;
        for(int i = 1000; i<=9999; i++) vis[i] = 0,level[i] = -1;
        bfs(x);
        if(level[y]==-1)cout<<"Impossible"<<endl;
        else cout<<level[y]<<endl;
    }
    return 0;
}
