int dp[1000][1000];
int recur(vector<int>&v,int n,int k){
    if(n==0){
        if(k==0)return  dp[n][k] = true;
        else return dp[n][k] = false;
    }
    if(dp[n][k]!=-1)return dp[n][k];
    if(k-v[n-1]>=0) return dp[n][k] = recur(v,n-1,k-v[n-1])||recur(v,n-1,k);
    else return dp[n][k] = recur(v,n-1,k);
}

bool subsetSumToK(int n, int k, vector<int> &v) {
    // Write your code here.
    for(int i= 0; i<=n; i++){
        for(int j = 0; j<=k; j++){
            dp[i][j] = 0;
        }
    }
//     int ans = recur(v,n,k);
    //tabulation
    //space optimization
    vector<int>prev(k+1,-1);
    for(int i = 0; i<=n; i++){
        vector<int>curr(k+1,-1);
        for(int j = 0; j<=k; j++){
            if(i==0){
                if(j==0)curr[j] = 1;
                else curr[j] = 0;
            }
            else if(j-v[i-1]>=0){
                curr[j] = prev[j]+prev[j-v[i-1]];
            }
            else curr[j] = prev[j];
        }
        prev = curr;
    }
//     for(int i = 0; i<=n; i++){
//         for(int j = 0; j<=k; j++){
//             cout<<dp[i][j]<<" "; 
//         }
//         cout<<endl;
//     }
//     cout<<endl;
    return prev[k];
}
