This is actually the follow up question. Initially question is exactly LC - 862. Shortest Subarray with Sum at Least K. 
Then the interviewer asked this other-way around follow-up: Given an array of integers (contains both positive and negative numbers), 
find the longest subarray with sum at most k. Is this doable in O(n)?

CODE::

public static void main(String[] args) {
		
		System.out.println(largestSubarray(new int[] {5, -10, 7, -20, 57}, -22)); // o/p = 3
		System.out.println(largestSubarray(new int[] {-1, -1, 10, -1, -1}, 5)); //o/p = 2
		System.out.println(largestSubarray(new int[] {-5, 8, -14, 2, 4, 12}, 5)); //o/p = 5
		System.out.println(largestSubarray(new int[] {1, 2, 1, 0, 1, -8, -9, 0}, 4)); //o/p=8
		System.out.println(largestSubarray(new int[] {1, 2, 1, 0, 1, 1, 0}, 4)); //o/p = 5
		System.out.println(largestSubarray(new int[] {10, 5, 2, 7, 1, 9}, 15)); // o/p = 4

	}
	
	private static int largestSubarray(int[] arr, int k) {
		if(arr == null || arr.length == 0)
			return 0;
		
		int n = arr.length;
		int[] negsum = new int[n];
		int prev = 0;
		for(int i=n-1; i>=0 ; i--) {
			negsum[i] = prev;
			if(prev + arr[i] <= 0) {
				prev += arr[i];
			}
			else {
				prev = 0;
			}
		}
		
		int sum = 0;
		int max = 0;
		int i = 0;
		
		for(int j=0; j<n; j++) {
			sum += arr[j];
			while(i<=j && sum + negsum[j] > k) {
				sum -= arr[i++];
			}
			max = Math.max(max, j-i+1);
		}
		return max;
	}-
