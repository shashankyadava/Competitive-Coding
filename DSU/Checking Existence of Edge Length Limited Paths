An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi.
Note that there may be multiple edges between two nodes.

Given an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge 
on the path has a distance strictly less than limitj .

Return a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.



class Solution {
public:
    vector<int>parent,rank;
    int f(int x){
        if(parent[x]==x)return x;
        return parent[x] = f(parent[x]);
    }
    void u(int a,int b){
        int x = f(a);
        int y = f(b);
        if(x!=y){
            if(rank[x]>=rank[y]){
                parent[y] = x;
                rank[x]+=rank[y];
            }
            else{
                parent[x] = y;
                rank[y]+=rank[x];
            }
        }
    }
    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& e, vector<vector<int>>& q) {
        parent.resize(n);
        rank.resize(n,0);
        for(int i = 0; i<n; i++)parent[i] = i;
        for(int i = 0; i<q.size(); i++)q[i].push_back(i);
        sort(e.begin(),e.end(),[&](auto const &a, auto const &b){
            return a[2]<b[2];
        });
        sort(q.begin(),q.end(),[&](auto const &a, auto const &b){
           return a[2]<b[2]; 
        });
        int j = 0;
        vector<bool>res(q.size(),false);
        for(int i = 0; i<q.size(); i++){
            while(j<e.size()&&e[j][2]<q[i][2]){
                u(e[j][0],e[j][1]);
                j++;
            }
            int x = f(q[i][0]);
            int y = f(q[i][1]);
            if(x==y)res[q[i][3]] = true;
        }
        return res;
    }
};
