Let's call left cyclic shift of some string t1t2t3…tn−1tn as string t2t3…tn−1tnt1.

Analogically, let's call right cyclic shift of string t as string tnt1t2t3…tn−1.

Let's say string t is good if its left cyclic shift is equal to its right cyclic shift.

You are given string s which consists of digits 0–9.

What is the minimum number of characters you need to erase from s to make it good?

CODE::

#include<bits/stdc++.h>
using namespace std;
#define ll long long
int solve(string s,int x,int y){
    int res = 0;
    for(int i = 0; i<s.size(); i++){
        if(s[i]-'0'==x){
            swap(x,y);
            res++;
        }
    }
    if(x!=y&&res%2)res--;
    return res;
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll t; cin>>t;
    while(t--){
        string s; cin>>s;
        int ans = 0;
        for(int i = 0; i<=9; i++){
            for(int j = 0; j<=9; j++){
                ans = max(ans,solve(s,i,j));
            }
        }
        cout<<s.size()-ans<<endl;
    }
    return 0;
}
