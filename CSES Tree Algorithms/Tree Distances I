#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define sky LONG_LONG_MAX
#define ajen LONG_LONG_MIN
#define mod 1000000007
#define modulo 998244353
#define nline '\n'
#define need_mod 2147483647
const int N = 200005;
template<class T> using maxpq = priority_queue<T>;
template<class T> using minpq = priority_queue<T, vector<T>, greater<T>>;
template <typename PB> using ordered_set = tree<PB,null_type,less_equal<PB>,rb_tree_tag,tree_order_statistics_node_update>;


void dfs(int u,int par,vector<int>g[],vector<int>&dist){
    for(auto child: g[u]){
        if(child!=par){
            dist[child]+=(1+dist[u]);
            dfs(child,u,g,dist);
        }
    }
    
}
int main(){
    //setIO("filename");
    ios_base::sync_with_stdio(0);
    cin.tie(0); 
    ll n; cin>>n;
    vector<int>dist(n+1);
    vector<int>dist1(n+1);
    vector<int>dist2(n+1);
    vector<int>g[n+1];
    vector<int>vis(n+1);
    for(int i = 0; i<n-1; i++){
        ll x,y; cin>>x>>y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    dfs(1,0,g,dist);
    int max_node = 0;
    int max_dist = 0;
    for(int i = 1; i<=n; i++){
        if(max_dist<dist[i]){
            max_dist = dist[i];
            max_node = i;
        }
        dist[i] = 0;
    }
    dfs(max_node,0,g,dist);
    int maxx_node = 0;
    max_dist = 0;
    for(int i = 1; i<=n; i++){
        if(max_dist<dist[i]){
            max_dist = dist[i];
            maxx_node = i;
        }
    }
    dfs(max_node,0,g,dist1);
    dfs(maxx_node,0,g,dist2);
    for(int i = 1; i<=n; i++){
        dist[i] = max(dist1[i],dist2[i]);
    }
    for(int i = 1; i<=n; i++)cout<<dist[i]<<" ";
    cout<<endl;
    return 0;
}
