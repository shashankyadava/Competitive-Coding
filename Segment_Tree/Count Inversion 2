#include <bits/stdc++.h> 
using namespace std;
vector<int>seg;
void build(int low,int high,int indx,long long arr[]){
    if(low==high){
        seg[indx] = arr[low];
        return;
    }
    int mid = (low+high)/2;
    build(low,mid,2*indx+1,arr);
    build(mid+1,high,2*indx+2,arr);
    seg[indx] = seg[2*indx+1]+seg[2*indx+2];
}
int query(int low,int high,int indx,int l,int r){
    if(l>high||r<low)return 0;
    if(l<=low&&high<=r){
        return seg[indx];
    }
    int mid = (low+high)/2;
    int left = query(low,mid,2*indx+1,l,r);
    int right = query(mid+1,high,2*indx+2,l,r);
    return left+right;
}
void update(int low,int high,int indx,int i,int val){
    if(low==high){
        seg[indx] += val;
        return;
    }
    int mid = (low+high)/2;
    if(i<=mid){
        update(low,mid,2*indx+1,i,val);
    }
    else update(mid+1,high,2*indx+2,i,val);
    seg[indx] = seg[2*indx+1]+seg[2*indx+2];
}
long long getInversions(long long *arr, int n){
    long long mx = -1;
    for(int i = 0; i<n; i++){
        mx = max(mx,arr[i]);
    }
    seg.resize(mx,0);
    long long freq[mx] = {0};
    for(int i = 0; i<n; i++){
        freq[arr[i]-1]++;
    }
    build(0,mx-1,0,freq);
    long long cnt = 0;
    for(int i = 0; i<n; i++){
        update(0,mx-1,0,arr[i]-1,-1);
        cnt+=query(0,mx-1,0,0,arr[i]-2);
    }
    return cnt;
}
